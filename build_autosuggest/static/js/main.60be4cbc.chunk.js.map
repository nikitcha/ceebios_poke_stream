{"version":3,"sources":["Autosuggest.js","index.tsx"],"names":["_","require","COLORS","SPECIES","GENUS","FAMILY","ORDER","CLASS","PHYLUM","KINGDOM","SUBSPECIES","VARIETY","getSuggestions","value","a","inputValue","trim","toLowerCase","inputLength","length","options","searchHistory","JSON","parse","localStorage","getItem","uniq","slice","map","el","push","getSuggestionsGBIF","then","results","getSuggestionValue","suggestion","name","renderSuggestion","undefined","rank","style","backgroundColor","fontSize","width","renderSectionTitle","section","title","getSectionSuggestions","suggestions","q","fetch","encodeURI","response","json","canonicalName","order","sortBy","SearchAutosuggest","onChange","event","newValue","setState","Streamlit","setComponentValue","onSuggestionsFetchRequested","onSuggestionsClearRequested","state","this","setFrameHeight","inputProps","placeholder","multiSection","React","Component","withStreamlitConnection","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0RAaIA,G,OAAIC,EAAQ,MAEVC,EAAS,CACbC,QAAQ,UACRC,MAAM,UACNC,OAAO,UACPC,MAAM,UACNC,MAAM,UACNC,OAAO,UACPC,QAAQ,WAGJH,EAAQ,CACZG,QAAQ,EACRD,OAAO,EACPD,MAAM,EACND,MAAM,EACND,OAAO,EACPD,MAAM,EACND,QAAQ,EACRO,WAAW,EACXC,QAAQ,GAMJC,EAAc,uCAAG,WAAMC,GAAN,qBAAAC,EAAA,yDACfC,EAAaF,EAAMG,OAAOC,cAC1BC,EAAcH,EAAWI,OAE3BC,EAAU,GAEVC,EAAgBC,KAAKC,MAAMC,aAAaC,QAAQ,kBAEpDJ,GADAA,EAAgBrB,EAAE0B,KAAKL,GAAeM,OAAO,IACfC,KAAI,SAAAC,GAAE,MAAK,CAAC,KAAOA,MACjDT,EAAQU,KAAK,CACX,MAAQ,gBACR,YAAcT,MAGZH,EAAc,GAdG,kCAeba,EAAmBlB,GAAOmB,MAAK,SAAAC,GACnCb,EAAQU,KAAK,CACX,MAAQ,kCACR,YAAcG,OAlBC,aAuBjBf,EAAc,GAvBG,0CAwBZ,IAxBY,iCA0BZE,GA1BY,4CAAH,sDA8Bdc,EAAqB,SAAAC,GAAU,OAAIA,EAAWC,MAG9CC,EAAmB,SAAAF,GAAU,OACjC,kCACuBG,IAApBH,EAAWI,KACX,GACA,8BAAM,kBAAC,IAAD,CAAOC,MAAO,CAACC,gBAAgBvC,EAAOiC,EAAWI,OAAS,OAAOG,SAAS,GAAGC,MAAM,KAAMR,EAAWI,OAH7G,IAKKJ,EAAWC,OAIZQ,EAAqB,SAAAC,GACzB,OAAO,gCAASA,EAAQC,QAGpBC,EAAwB,SAAAF,GAC5B,OAAOA,EAAQG,aAGXjB,EAAkB,uCAAG,WAAOkB,GAAP,mBAAAnC,EAAA,sEACFoC,MAAM,6CAAD,OAA8CC,UAAUF,KAD3D,cACnBG,EADmB,gBAENA,EAASC,OAFH,cAEnBA,EAFmB,OAGrBpB,EAAUoB,EAAKzB,KAAI,SAAAC,GAAE,MAAK,CAC5BO,KAAKP,EAAGyB,cACRf,KAAKV,EAAGU,KACRgB,MAAMjD,EAAMuB,EAAGU,OAAS,MAE1BN,EAAUjC,EAAEwD,OAAOvB,EAAQ,SARF,kBASlBA,GATkB,2CAAH,sDAalBwB,E,kDACJ,aAAe,IAAD,8BACZ,gBAMFC,SAAW,SAACC,EAAD,GAA0B,IAAhBC,EAAe,EAAfA,SAEnB,EAAKC,SAAS,CACZhD,MAAO+C,IAETE,IAAUC,kBAAkBH,IAZhB,EAiBdI,4BAA8B,YAAgB,IAAbnD,EAAY,EAAZA,MAC/BD,EAAeC,GAAOmB,MAAK,SAAAC,GAEzB,EAAK4B,SAAS,CACZb,YAAaf,QArBL,EA4BdgC,4BAA8B,WAC5B,EAAKJ,SAAS,CACZb,YAAa,MA5Bf,EAAKkB,MAAQ,CACXrD,MAAO,GACPmC,YAAa,IAJH,E,0CAkCd,WACE,MAA+BmB,KAAKD,MAA5BrD,EAAR,EAAQA,MAAOmC,EAAf,EAAeA,YAEfc,IAAUM,eAAe,SAEzB,IAAMC,EAAa,CACjBC,YAAa,uBACbzD,QACA6C,SAAUS,KAAKT,UAIjB,OACE,kBAAC,IAAD,CACEV,YAAaA,EACbgB,4BAA6BG,KAAKH,4BAClCC,4BAA6BE,KAAKF,4BAClC/B,mBAAoBA,EACpBG,iBAAkBA,EAClBkC,cAAc,EACd3B,mBAAoBA,EACpBG,sBAAuBA,EACvBsB,WAAYA,Q,GAzDYG,IAAMC,WA8DvBC,cAAwBjB,GClKvCkB,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,U","file":"static/js/main.60be4cbc.chunk.js","sourcesContent":["import React from \"react\"\r\nimport Autosuggest from 'react-autosuggest';\r\nimport { Badge } from \"shards-react\";\r\nimport {\r\n  //ComponentProps,\r\n  Streamlit,\r\n  withStreamlitConnection,\r\n} from \"streamlit-component-lib\"\r\n\r\n// https://react-autosuggest.js.org/\r\n\r\nimport \"./Autosuggest.css\"\r\n\r\nvar _ = require('lodash')\r\n\r\nconst COLORS = {\r\n  SPECIES:\"#fb2056\",\r\n  GENUS:\"#fc8f5b\",\r\n  FAMILY:\"#ffd055\",\r\n  ORDER:\"#8dd58c\",\r\n  CLASS:\"#38c9b1\",\r\n  PHYLUM:\"#1798c3\",\r\n  KINGDOM:\"#182573\",\r\n}\r\n\r\nconst ORDER = {\r\n  KINGDOM:1,\r\n  PHYLUM:2,\r\n  CLASS:3,\r\n  ORDER:4,\r\n  FAMILY:5,\r\n  GENUS:6,\r\n  SPECIES:7,\r\n  SUBSPECIES:8,\r\n  VARIETY:9,\r\n}\r\n\r\n\r\n\r\n// Teach Autosuggest how to calculate suggestions for any given input value.\r\nconst getSuggestions = async value => {\r\n  const inputValue = value.trim().toLowerCase();\r\n  const inputLength = inputValue.length;\r\n\r\n  let options = []\r\n  \r\n  let searchHistory = JSON.parse(localStorage.getItem(\"searchHistory\"))\r\n  searchHistory = _.uniq(searchHistory).slice(-5)\r\n  searchHistory = searchHistory.map(el => ({\"name\":el}))\r\n  options.push({\r\n    \"title\":\"Last searches\",\r\n    \"suggestions\":searchHistory\r\n  })\r\n \r\n  if (inputLength > 2){\r\n    await getSuggestionsGBIF(value).then(results => {\r\n      options.push({\r\n        \"title\":\"Scientific names recommendation\",\r\n        \"suggestions\":results\r\n      })\r\n    })\r\n  }\r\n\r\n  if (inputLength < 3){\r\n    return []\r\n  } else {\r\n    return options\r\n  }\r\n};\r\n\r\nconst getSuggestionValue = suggestion => suggestion.name;\r\n\r\n// Use your imagination to render suggestions.\r\nconst renderSuggestion = suggestion => (\r\n  <div>\r\n    {suggestion.rank === undefined ?\r\n     \"\" :\r\n     <span><Badge style={{backgroundColor:COLORS[suggestion.rank] || \"gray\",fontSize:12,width:80}}>{suggestion.rank}</Badge></span>\r\n      // `- ${suggestion.rank}`\r\n    } {suggestion.name}\r\n  </div>\r\n);\r\n\r\nconst renderSectionTitle = section => {\r\n  return <strong>{section.title}</strong>;\r\n}\r\n\r\nconst getSectionSuggestions = section => {\r\n  return section.suggestions;\r\n}\r\n\r\nconst getSuggestionsGBIF = async (q) => {\r\n  const response = await fetch(`https://api.gbif.org/v1/species/suggest?q=${encodeURI(q)}`)\r\n  const json = await response.json()\r\n  let results = json.map(el => ({\r\n    name:el.canonicalName,\r\n    rank:el.rank,\r\n    order:ORDER[el.rank] || 8\r\n  }))\r\n  results = _.sortBy(results,\"order\")\r\n  return results\r\n}\r\n\r\n\r\nclass SearchAutosuggest extends React.Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      value: '',\r\n      suggestions: []\r\n    };    \r\n  }\r\n  onChange = (event, { newValue }) => {\r\n    //this.props.onChange(newValue)\r\n    this.setState({\r\n      value: newValue\r\n    });\r\n    Streamlit.setComponentValue(newValue)\r\n  };\r\n\r\n  // Autosuggest will call this function every time you need to update suggestions.\r\n  // You already implemented this logic above, so just use it.\r\n  onSuggestionsFetchRequested = ({ value }) => {\r\n    getSuggestions(value).then(results => {\r\n      //console.log(results);\r\n      this.setState({\r\n        suggestions: results\r\n      });\r\n    })\r\n\r\n  };\r\n\r\n  // Autosuggest will call this function every time you need to clear suggestions.\r\n  onSuggestionsClearRequested = () => {\r\n    this.setState({\r\n      suggestions: []\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const { value, suggestions } = this.state;\r\n    //useEffect(()  => Streamlit.setFrameHeight())\r\n    Streamlit.setFrameHeight('500px')\r\n    // Autosuggest will pass through all these props to the input.\r\n    const inputProps = {\r\n      placeholder: 'Search for a species',\r\n      value,\r\n      onChange: this.onChange\r\n    };\r\n\r\n    // Finally, render it!\r\n    return (\r\n      <Autosuggest\r\n        suggestions={suggestions}\r\n        onSuggestionsFetchRequested={this.onSuggestionsFetchRequested}\r\n        onSuggestionsClearRequested={this.onSuggestionsClearRequested}\r\n        getSuggestionValue={getSuggestionValue}\r\n        renderSuggestion={renderSuggestion}\r\n        multiSection={true}\r\n        renderSectionTitle={renderSectionTitle}\r\n        getSectionSuggestions={getSectionSuggestions}\r\n        inputProps={inputProps}\r\n      />\r\n    );\r\n  }\r\n}\r\nexport default withStreamlitConnection(SearchAutosuggest)","import React from \"react\"\r\nimport ReactDOM from \"react-dom\"\r\nimport SearchAutosuggest from \"./Autosuggest\"\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <SearchAutosuggest />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n)\r\n"],"sourceRoot":""}